[virtual_sdcard]
path: /home/pi/printer_data/gcodes

[pause_resume]

[gcode_macro PRINT_START]
variable_parameter_AREA_START : 0,0
variable_parameter_AREA_END : 0,0
gcode:
    {% set BED = params.BED|default(55)|int %}
    {% set EXTRUDER = params.EXTRUDER|default(205)|int %}
    # Loading extruder and bed temperature
    M104 S170
    M140 S{BED} 
    G28 X Y
    RESPOND PREFIX= MSG="Waiting for temperatures..."
    M117  Waiting for temperatures...
    M190 S{BED}
    RESPOND PREFIX= MSG="Waiting for thermal expansion..."
    M117 Waiting for thermal expansion...
    G4 P50000
    RESPOND PREFIX= MSG="Creating a mesh..."
    M117 Creating a mesh...
    G28
    QUAD_GANTRY_LEVEL
    G1 Z15
    G1 Y25
    G28
    BED_MESH_CALIBRATE
    M104 S{EXTRUDER}
    # Move to prime position
    SKEW_PROFILE LOAD=my_skew_profile
    RESPOND PREFIX= MSG="Moving to prime position"
    M117 Moving to prime position
    G1 X15 Y0 Z10 F5000.0
    {% if printer.extruder.temperature < params.EXTRUDER|float*0.98 %}
        M109 S{params.EXTRUDER|float*0.98} # wait till 0.85 of bed temp is reached, then continue  
    {% endif %}
    G4 P50000
    #LINE_PURGE
    M104 S{EXTRUDER}
    G4 P30000
    G0 Z0.3
    G91
    G1 Y60 E15 F1200;
    G1 X1
    G1 Y-60 E315 F1200;
    G1 Z4 F1200;
    G92 E0;
    RESPOND PREFIX= MSG="Printing..."
    M117 Printing...
    M117


[gcode_macro PID_TUNE]
gcode:
    G28
    G1 Z10 F7800
    M106 S64
  PID_CALIBRATE HEATER=extruder TARGET=245

[display_status]

[gcode_macro END_PRINT]
gcode:
    SET_SKEW CLEAR=1
    # Retract filament to prevent oozing
    G91
    G1 E-2
    G1 Z{10}
    # Absolute XY 
    G90
    G1 Y275 F9000
    # Disable hotend and heated bed
    TURN_OFF_HEATERS
    # Park toolhead
    # Disable steppers
    
[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:

    SAVE_GCODE_STATE NAME=PAUSE_state
    BASE_PAUSE
    G91
    G1 E-{2} F2100
    G1 Z{10}
    G90
    G1 X{230} Y{230} F6000
    G91

[gcode_macro RESUME]
rename_existing: BASE_RESUME
gcode:
    G91
    G1 E{s} F2100
    G90
    RESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1
    BASE_RESUME

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    G91
     G1 Z10 F8000
    TURN_OFF_HEATERS
    CLEAR_PAUSE
    SDCARD_RESET_FILE
    BASE_CANCEL_PRINT
    # Raise nozzle by 10mm
    G91
    G1 Z10 F8000
    G90
    G1 X0 Y222 E-3 F8000
    DISABLE_MOTORS
    M106 S0 ; turn off fan
    M117 Print Canceled


[exclude_object]




[gcode_macro M486]
gcode:
  # Parameters known to M486 are as follows:
  #   [C<flag>] Cancel the current object
  #   [P<index>] Cancel the object with the given index
  #   [S<index>] Set the index of the current object.
  #       If the object with the given index has been canceled, this will cause
  #       the firmware to skip to the next object. The value -1 is used to
  #       indicate something that isn’t an object and shouldn’t be skipped.
  #   [T<count>] Reset the state and set the number of objects
  #   [U<index>] Un-cancel the object with the given index. This command will be
  #       ignored if the object has already been skipped

  {% if 'exclude_object' not in printer %}
    {action_raise_error("[exclude_object] is not enabled")}
  {% endif %}

  {% if 'T' in params %}
    EXCLUDE_OBJECT RESET=1

    {% for i in range(params.T | int) %}
      EXCLUDE_OBJECT_DEFINE NAME={i}
    {% endfor %}
  {% endif %}

  {% if 'C' in params %}
    EXCLUDE_OBJECT CURRENT=1
  {% endif %}

  {% if 'P' in params %}
    EXCLUDE_OBJECT NAME={params.P}
  {% endif %}

  {% if 'S' in params %}
    {% if params.S == '-1' %}
      {% if printer.exclude_object.current_object %}
        EXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}
      {% endif %}
    {% else %}
      EXCLUDE_OBJECT_START NAME={params.S}
    {% endif %}
  {% endif %}

  {% if 'U' in params %}
    EXCLUDE_OBJECT RESET=1 NAME={params.U}
  {% endif %}


[gcode_macro TEST_SPEED]
gcode:
	# Speed
	{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
	# Iterations
	{% set iterations = params.ITERATIONS|default(5)|int %}
	# Acceleration
	{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
	# Bounding box (in case the machine min/maxes are not perfect)
	{% set bound = params.BOUND|default(20)|int %}
	
	# Set speed test bounds (machine minimum/maximum positions, inset by the bounding box)
	{% set x_min = printer.toolhead.axis_minimum.x + bound %}
	{% set x_max = printer.toolhead.axis_maximum.x - bound %}
	{% set y_min = printer.toolhead.axis_minimum.y + bound %}
	{% set y_max = printer.toolhead.axis_maximum.y - bound %}

	# Save current gcode state (absolute/relative, etc)
	SAVE_GCODE_STATE NAME=TEST_SPEED
	
	# Absolute positioning
	G90
	
	# Set new limits
	SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}

	# Home and get position for comparison later:
		G28
		# QGL if not already QGLd (only if QGL section exists in config)
		{% if printer.configfile.settings.quad_gantry_level %}
			{% if printer.quad_gantry_level.applied == False %}
				QUAD_GANTRY_LEVEL
				G28 Z
			{% endif %}
		{% endif %}	
		G0 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F{30 * 60}
		G4 P1000 
		GET_POSITION
        G1 Z10 F8000
	# Go to starting position
	G0 X{x_min} Y{y_min}  Z{bound + 10} F{speed * 60}

	{% for i in range(iterations) %}
		# Diagonals
		G0 X{x_min} Y{y_min} F{speed * 60}
		G0 X{x_max} Y{y_max} F{speed * 60}
		G0 X{x_min} Y{y_min} F{speed * 60}
		G0 X{x_max} Y{y_min} F{speed * 60}
		G0 X{x_min} Y{y_max} F{speed * 60}
		G0 X{x_max} Y{y_min} F{speed * 60}
		
		# Box
		G0 X{x_min} Y{y_min} F{speed * 60}
		G0 X{x_min} Y{y_max} F{speed * 60}
		G0 X{x_max} Y{y_max} F{speed * 60}
		G0 X{x_max} Y{y_min} F{speed * 60}
	{% endfor %}

	# Restore max speed/accel/accel_to_decel to their configured values
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 

	# Re-home XY and get position again for comparison:
		G28 X Y
		# Go to XY home positions (in case your homing override leaves it elsewhere)
		G0 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F{30 * 60}
		G4 P1000 
		GET_POSITION

	# Restore previous gcode state (absolute/relative, etc)
	RESTORE_GCODE_STATE NAME=TEST_SPEED
